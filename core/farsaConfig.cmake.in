# This file contains code to make it possible to compile code using farsa
# (including plugins) outside the farsa tree

if(NOT FARSA_FOUND)
	# Version Information
	set(FARSA_VER_MAJ "@FARSA_VER_MAJ@")
	set(FARSA_VER_MIN "@FARSA_VER_MIN@")
	set(FARSA_VER_PAT "@FARSA_VER_PAT@")

	message(STATUS "Found farsa version ${FARSA_VER_MAJ}.${FARSA_VER_MIN}.${FARSA_VER_PAT}")

	# Importing QT stuffs, that is used everywhere in farsa
	find_package(Qt5Test REQUIRED)
	find_package(Qt5Widgets REQUIRED)
	find_package(Qt5Xml REQUIRED)
	find_package(Qt5Concurrent REQUIRED)
	find_package(Qt5OpenGL REQUIRED)
	find_package(Qt5Svg REQUIRED)
	# This is needed for QT to work
	set(CMAKE_INCLUDE_CURRENT_DIR ON)
	set(CMAKE_AUTOMOC ON)

	# Extracting the path containing the exportedFarsaTargets.cmake file and
	# including it
	get_filename_component(THIS_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
	include("${THIS_DIR}/exportedFarsaTargets.cmake")

	# Setting some useful variables
	set(FARSA_USE_GSL @FARSA_USE_GSL@)
	set(FARSA_INSTALL_PREFIX "@FARSA_USEFILE_INSTALL_PREFIX@")
	set(FARSA_INSTALL_MISC "@FARSA_USEFILE_INSTALL_MISC@")
	set(FARSA_PLUGINS_HEADER_INSTALL_DEST "${FARSA_INSTALL_PREFIX}/include/farsa/plugins")
	set(FARSA_PLUGINS_LIB_INSTALL_DEST "${FARSA_INSTALL_PREFIX}/lib/farsa/plugins")
	set(FARSA_PLUGINS_CONF_INSTALL_DEST "${FARSA_INSTALL_MISC}/plugins")
	set(FARSA_PLUGINS_CMAKE_SCRIPT_INSTALL_DEST "${FARSA_INSTALL_MISC}/pluginsCMakeScripts")
	set(FARSA_PLUGIN_HELPER "${FARSA_INSTALL_PREFIX}/bin/farsapluginhelper")
	set(FARSA_TEST_PLUGIN_SCRIPT_PATH "@FARSA_TEST_PLUGIN_SCRIPT_PATH@")
	set(FARSA_TOTAL99_EXECUTABLE_PATH "@FARSA_TOTAL99_EXECUTABLE_PATH@")

	# Declaring useful helper functions

	# Testing related functions are defined only if testing is enabled
	if(BUILD_TESTING)
		# Including Python to be able to use the test script
		find_package(PythonInterp 3 QUIET)

		if(PYTHONINTERP_FOUND)
			# Declaring a function to ease the creation of tests using the test plugin script.
			# See the testPlugin.py script for an in depth explanation. TEST_NAME is the name
			# of the test, TEST_TIMEOUT is the maximum time the test is allowed to run in
			# seconds, PLUGIN_TEST_DIR is a path relative to the current CMAKE_SOURCE_DIR
			# containing the files for the test, TEST_DIR is a path relative to the current
			# CMAKE_BINARY_DIR which will be used to execute the test (note that the directory
			# will be removed a created again for scratch before each test), ACTION is the
			# action to execute. Arguments past ACTION will be passed as they are to the
			# script (use them to define e.g. files to match). PLUGIN_TEST_DIR can contain
			# subdirectories called Windows, Linux, MacOSX or with the hostname of a machine.
			# The files for the test are then taken from one of these subdirectory if the
			# hostname or host type matches, otherwise directly from PLUGIN_TEST_DIR. The
			# tests will always be executed on a Release build of the plugin
			function(add_farsaplugin_test TEST_NAME TEST_TIMEOUT PLUGIN_TEST_DIR TEST_DIR ACTION)
				set(ABSOLUTE_PLUGIN_TEST_DIR "${CMAKE_SOURCE_DIR}/${PLUGIN_TEST_DIR}")
				set(ABSOLUTE_TEST_DIR "${CMAKE_BINARY_DIR}/${TEST_DIR}")

				# Checking if there is a subdirectory we should use inside ABSOLUTE_PLUGIN_TEST_DIR
				site_name(PLUGIN_TEST_SITE)
				if(IS_DIRECTORY "${ABSOLUTE_PLUGIN_TEST_DIR}/${PLUGIN_TEST_SITE}")
					set(ABSOLUTE_PLUGIN_TEST_DIR "${ABSOLUTE_PLUGIN_TEST_DIR}/${PLUGIN_TEST_SITE}")
				elseif(WIN32 AND IS_DIRECTORY "${ABSOLUTE_PLUGIN_TEST_DIR}/Windows")
					set(ABSOLUTE_PLUGIN_TEST_DIR "${ABSOLUTE_PLUGIN_TEST_DIR}/Windows")
				elseif(UNIX AND APPLE AND IS_DIRECTORY "${ABSOLUTE_PLUGIN_TEST_DIR}/MacOSX")
					set(ABSOLUTE_PLUGIN_TEST_DIR "${ABSOLUTE_PLUGIN_TEST_DIR}/MacOSX")
				elseif(UNIX AND IS_DIRECTORY "${ABSOLUTE_PLUGIN_TEST_DIR}/Linux")
					set(ABSOLUTE_PLUGIN_TEST_DIR "${ABSOLUTE_PLUGIN_TEST_DIR}/Linux")
				endif()

				if(WIN32)
					add_test("${TEST_NAME}" "${PYTHON_EXECUTABLE}" "${FARSA_TEST_PLUGIN_SCRIPT_PATH}" "${FARSA_TOTAL99_EXECUTABLE_PATH}" "${ABSOLUTE_PLUGIN_TEST_DIR}" "${CMAKE_BINARY_DIR}/Release" "${ABSOLUTE_TEST_DIR}" "${ACTION}" "-w" ${ARGN})
				else()
					add_test("${TEST_NAME}" "${PYTHON_EXECUTABLE}" "${FARSA_TEST_PLUGIN_SCRIPT_PATH}" "${FARSA_TOTAL99_EXECUTABLE_PATH}" "${ABSOLUTE_PLUGIN_TEST_DIR}" "${CMAKE_BINARY_DIR}" "${ABSOLUTE_TEST_DIR}" "${ACTION}" ${ARGN})
				endif()
				set_tests_properties("${TEST_NAME}" PROPERTIES TIMEOUT "${TEST_TIMEOUT}")
			endfunction()
		else()
			# We could not find python3, the test script provided by FARSA cannot be used
			function(add_farsaplugin_test TEST_NAME)
				message(WARNING "The add_farsaplugin_test function cannot be used because the python 3 interpreter was not found. The test \"${TEST_NAME}\" will not be added")
			endfunction()
		endif()

		# This function adds a test to install the plugin
		function(add_farsaplugin_install_test)
			if(UNIX)
				add_test(TestInstall "${CMAKE_BUILD_TOOL}" install)
			else()
				# Tests are executed on the release build (see CTestScript.cmake), so we can directly set the Configuration
				# property to Release, here
				add_test(TestInstall "${CMAKE_BUILD_TOOL}" "INSTALL.vcxproj" "/p:Configuration=Release")
			endif()
		endfunction()
	endif()

	# The function to define a new plugin. After TARGET_NAME pass all the files needed to create the plugin. The .h files
	# will also be added to the list of headers to install. Here we also automatically generate the subclass of FarsaPlugin
	function(add_farsaplugin TARGET_NAME)
		# Getting all the headers passed to this function
		foreach(FILE_TO_TEST ${ARGN})
			if("${FILE_TO_TEST}" MATCHES ".*[.](h|hpp|hxx|hh)")
				if (IS_ABSOLUTE "${FILE_TO_TEST}")
					list(APPEND FARSA_PLUGIN_HEADERS_TO_INSTALL "${FILE_TO_TEST}")
				else()
					list(APPEND FARSA_PLUGIN_HEADERS_TO_INSTALL "${CMAKE_CURRENT_SOURCE_DIR}/${FILE_TO_TEST}")
				endif()
			endif()
		endforeach()

		# We have to generate the subclass of FarsaPlugin using farsapluginhelper

		# First of all creating the directory that will contain parsed heders
		file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/farsa_ParsedHeaders")

		# Now adding the command to actually generate the files for the FarsaPlugin subclass
		add_custom_command(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/plugin_main.h" "${CMAKE_CURRENT_BINARY_DIR}/plugin_main.cpp" COMMAND "${FARSA_PLUGIN_HELPER}" ${TARGET_NAME} ${CMAKE_CURRENT_BINARY_DIR} "${CMAKE_CURRENT_BINARY_DIR}/farsa_ParsedHeaders" "plugin_main" "${CMAKE_CURRENT_BINARY_DIR}/plugin_dependencies" ${FARSA_PLUGIN_HEADERS_TO_INSTALL} DEPENDS ${FARSA_PLUGIN_HEADERS_TO_INSTALL} COMMENT "Generating plugin registration and dependencies code")

		# We also need at least an empty file with dependencies
		file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/plugin_dependencies" "")

		# Adding the generated files to a list to have them compiled
		list(APPEND FARSA_GENERATED_PLUGIN_FILES "${CMAKE_CURRENT_BINARY_DIR}/plugin_main.h" "${CMAKE_CURRENT_BINARY_DIR}/plugin_main.cpp")

		# As the plugin_main.h file is generated, it is not moc'd at all. We must force using moc on this file
		# We also have to extract the directory containing the farsaplugin.h file, to pass it to moc (we use all
		# the include directories of the farsaexperiments target)
		get_target_property(FARSAPLUGIN_DIRS farsaexperiments INTERFACE_INCLUDE_DIRECTORIES)
		foreach(FARSAPLUGIN_INCLUDE_DIR IN LISTS FARSAPLUGIN_DIRS)
			list(APPEND MOC_INCLUDE_PATH_OPTION -I${FARSAPLUGIN_INCLUDE_DIR})
		endforeach()
		qt5_wrap_cpp(FARSA_GENERATED_PLUGIN_FILES "${CMAKE_CURRENT_BINARY_DIR}/plugin_main.h" OPTIONS ${MOC_INCLUDE_PATH_OPTION})

		# Now we also have to modify the list of headers to install because we have to install the headers
		# in ${CMAKE_CURRENT_BINARY_DIR} which have been parsed by farsapluginhelper
		set(FARSA_PLUGIN_HEADERS_TO_INSTALL_TMP ${FARSA_PLUGIN_HEADERS_TO_INSTALL})
		set(FARSA_PLUGIN_HEADERS_TO_INSTALL )
		foreach(HEADER_TO_CONVERT ${FARSA_PLUGIN_HEADERS_TO_INSTALL_TMP})
			string(REGEX REPLACE "^.*/(.*)$" "${CMAKE_CURRENT_BINARY_DIR}/farsa_ParsedHeaders/\\1" CONVERTED_HEADER "${HEADER_TO_CONVERT}")
			list(APPEND FARSA_PLUGIN_HEADERS_TO_INSTALL "${CONVERTED_HEADER}")
		endforeach()

		add_library(${TARGET_NAME} SHARED ${ARGN} ${FARSA_GENERATED_PLUGIN_FILES})
		target_link_libraries(${TARGET_NAME} farsaexperiments)
		set_target_properties(${TARGET_NAME} PROPERTIES PREFIX "" DEBUG_POSTFIX "" OUTPUT_NAME "${TARGET_NAME}_farsaPlugin")
		if(WIN32)
			set_target_properties(${TARGET_NAME} PROPERTIES DEBUG_POSTFIX "d")
		endif()

		# Specifying the public headers of this target
		set_property(TARGET ${TARGET_NAME} PROPERTY PUBLIC_HEADER ${FARSA_PLUGIN_HEADERS_TO_INSTALL})

		# Settings for RPATH. We have to set INSTALL_RPATH_USE_LINK_PATH for the library so that it finds other plugins at
		# execution time
		set_target_properties(${TARGET_NAME} PROPERTIES VERSION ${FARSA_VER_MAJ}.${FARSA_VER_MIN}.${FARSA_VER_PAT} SOVERSION ${FARSA_VER_MAJ}.${FARSA_VER_MIN} INSTALL_NAME_DIR ${FARSA_PLUGINS_LIB_INSTALL_DEST} INSTALL_RPATH ${FARSA_PLUGINS_LIB_INSTALL_DEST})

		# Install commands
		set(FARSA_PLUGIN_HEADER_DEST_DIR "${FARSA_PLUGINS_HEADER_INSTALL_DEST}/${TARGET_NAME}")
		install(TARGETS ${TARGET_NAME}
		        ARCHIVE DESTINATION "${FARSA_PLUGINS_LIB_INSTALL_DEST}"
		        LIBRARY DESTINATION "${FARSA_PLUGINS_LIB_INSTALL_DEST}"
		        RUNTIME DESTINATION "${FARSA_PLUGINS_LIB_INSTALL_DEST}"
		        PUBLIC_HEADER DESTINATION "${FARSA_PLUGIN_HEADER_DEST_DIR}")
	endfunction()

	# The function to add dependecies on installed plugins. Call with the name of the plugin to compile
	# followed by the list of all plugins on which it depends
	function(farsa_plugin_dependencies TARGET_NAME)
		# Checking a target named as the plugin exists
		if(NOT TARGET ${TARGET_NAME})
			message(FATAL_ERROR "${TARGET_NAME} doesn't exist. You must call add_farsaplugin before using farsa_plugin_dependencies")
		endif()

		foreach(DEPENDENCY_PLUGIN_NAME ${ARGN})
			# Unfortunately it seems that the _farsaPlugin. part of the lib name creates problems, so we must link the full
			# path to the dependency plugin, with the suffix which depends on the operating system
			if(WIN32)
				target_link_libraries(${TARGET_NAME} debug "${FARSA_PLUGINS_LIB_INSTALL_DEST}/${DEPENDENCY_PLUGIN_NAME}_farsaPlugind.lib" optimized "${FARSA_PLUGINS_LIB_INSTALL_DEST}/${DEPENDENCY_PLUGIN_NAME}_farsaPlugin.lib")
			elseif(APPLE)
				target_link_libraries(${TARGET_NAME} "${FARSA_PLUGINS_LIB_INSTALL_DEST}/${DEPENDENCY_PLUGIN_NAME}_farsaPlugin.dylib")
			else() # Linux
				target_link_libraries(${TARGET_NAME} "${FARSA_PLUGINS_LIB_INSTALL_DEST}/${DEPENDENCY_PLUGIN_NAME}_farsaPlugin.so")
			endif()

			target_include_directories(${TARGET_NAME} PUBLIC "${FARSA_PLUGINS_HEADER_INSTALL_DEST}/${DEPENDENCY_PLUGIN_NAME}")

			# Checking whether the dependency has an associated cmake files and loading it if it exists. We
			# also set the FARSA_INCLUDING_PLUGIN_TARGET_NAME variable so that scripts can use it
			set(FARSA_INCLUDING_PLUGIN_TARGET_NAME "${TARGET_NAME}")
			if(EXISTS "${FARSA_PLUGINS_CMAKE_SCRIPT_INSTALL_DEST}/${DEPENDENCY_PLUGIN_NAME}.cmake")
				include("${FARSA_PLUGINS_CMAKE_SCRIPT_INSTALL_DEST}/${DEPENDENCY_PLUGIN_NAME}.cmake")
			endif()
		endforeach()

		# Here we also have to write a ${CMAKE_CURRENT_BINARY_DIR}/plugin_dependencies file with the list od dependencies
		file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/plugin_dependencies" "${ARGN}")
	endfunction()

	# The function to install configuration files for a plugin. TARGET_NAME must be the name
	# of a plugin which has been added with add_farsaplugin, while CONF_DIR must be a directory
	# containing the files to install. The content of CONF_DIR will be copied into a subdirectory
	# of the global plugins configuration directory with the same name as the plugin
	function(farsa_plugin_install_conf TARGET_NAME CONF_DIR)
		# Checking a target named as the plugin exists
		if(NOT TARGET ${TARGET_NAME})
			message(FATAL_ERROR "${TARGET_NAME} doesn't exist. You must call add_farsaplugin before using farsa_plugin_install_conf")
		endif()

		# Adding install command. The / at the end of CONF_DIR is to install the content of CONF_DIR
		# and not the directory itself
		install(DIRECTORY "${CONF_DIR}/" DESTINATION "${FARSA_PLUGINS_CONF_INSTALL_DEST}/${TARGET_NAME}")
	endfunction()

	# The function to install cmake scripts for a plugin. TARGET_NAME must be the name
	# of a plugin which has been added with add_farsaplugin, while SCRIPT_NAME must be the
	# name of the cmake script to install into the global plugin cmake script directory.
	# The script will be renamed to TARGET_NAME.cmake
	function(farsa_plugin_install_cmake_script TARGET_NAME SCRIPT_NAME)
		# Checking a target named as the plugin exists
		if(NOT TARGET ${TARGET_NAME})
			message(FATAL_ERROR "${TARGET_NAME} doesn't exist. You must call add_farsaplugin before using farsa_plugin_install_cmake_script")
		endif()

		# Adding install command. We also rename the script
		install(FILES "${SCRIPT_NAME}" DESTINATION "${FARSA_PLUGINS_CMAKE_SCRIPT_INSTALL_DEST}" RENAME "${TARGET_NAME}.cmake")
	endfunction()

	# This is to avoid double inclusions
	set(FARSA_FOUND ON)
endif()
